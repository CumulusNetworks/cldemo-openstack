# {{ ansible_managed }}

{### Initialize variables ###}
{% set node = node[ansible_hostname] -%}
{% set intvars = node.interfaces | d() -%}
{% set bonds = node.bonds | d() -%}
{% set vlans = node.VLANS | d() -%}
{% set svi = node.SVI | d() -%}
{% set MLAGvars = node.MLAG | d() -%}
{% set bgpvars = node.bgp | d() -%}

{### Handle the Loopback and all L3 interfaces ###}
{% for interface in intvars | sort %}
{%   if interface == "loopback" %}
auto lo
iface lo inet loopback
{%     if intvars[interface] is mapping %}
{%       if intvars[interface].vxlan_anycast_ip is defined %}
    clagd-vxlan-anycast-ip {{ intvars[interface].vxlan_anycast_ip }}
{%       endif %}
{%     else %}
{# must assume a list of interface aliases #}
{%       for child in intvars[interface] %}

auto lo:{{ loop.index }}
iface lo:{{ loop.index }}
{%         if child.ipv4 is defined %}
    address {{ child.ipv4 }}
{%         endif %}
{%         if child.ipv6 is defined %}
    address {{ child.ipv6 }}
{%         endif %}
{%         if interface.alias is defined %}
    alias {{interface.alias}}
{%         endif %}
{%       endfor %}
{%     endif %}
{%   else %}

auto {{interface}}
{%     if intvars[interface].dhcp is defined and intvars[interface].dhcp == "enable" %}
iface {{interface}} inet dhcp
{%     else %}
iface {{interface}}
{%     endif %}
{%   endif %}
{### Contents of interface stanza ###}

auto eth0
iface eth0 inet dhcp

{### Build the bonds and member interfaces ###}
{% if bonds is defined %}
{%   for bond in bonds -%}
{%     if bonds[bond].members is defined %}

{### Loop through and create the member interfaces ###}
{%       for mem_int in bonds[bond].members -%}
auto {{mem_int}}
iface {{mem_int}}
{%         if ansible_distribution == "Ubuntu" %}
    bond-master {{ bond }}
{%         endif %}
{%         if bonds[bond].mtu is defined %}
    mtu {{ bonds[bond].mtu }}
{%         endif %}
{%       endfor %}
{### Create the actual bond interface ###}
auto {{bond}}
{%       if bonds[bond].dhcp is defined and bonds[bond].dhcp == "enable" %}
iface {{bond}} inet dhcp
{%       else -%}
iface {{bond}}
{%       endif -%}
    bond-slaves {{bonds[bond].members | join(" ")}}
{%       if bonds[bond].mtu is defined %}
    mtu {{ bonds[bond].mtu }}
{%       endif %}
{%       if bonds[bond].LACP_rate is defined %}
{%         if bonds[bond].LACP_rate == "fast" %}
    bond-lacp-rate 1
{%         else %}
    bond-lacp-rate 0
{%         endif -%}
{%       endif %}

{%     endif %}
{%   endfor %}
{% endif %}
{%   if intvars[interface].ipv4 is defined %}
    address {{intvars[interface].ipv4}}
{%   endif %}
{%   if intvars[interface].ipv6 is defined %}
    address {{intvars[interface].ipv6}}
{%   endif %}
{%   if intvars[interface].alias is defined %}
    alias {{ intvars[interface].alias }}
{%   endif %}
{%   if intvars[interface].mtu is defined %}
    mtu {{ intvars[interface].mtu }}
{%   endif %}
{%   if intvars[interface].speed is defined %}
    link-speed {{ intvars[interface].speed }}
{%   endif %}
{%   if intvars[interface].duplex is defined %}
    link-duplex {{ intvars[interface].duplex }}
{%   endif %}
{%   if intvars[interface].autoneg is defined %}
    link-autoneg {{ intvars[interface].autoneg }}
{%   endif %}
{### If vids is defined it's a trunk otherwise check if access port ###}
{%   if intvars[interface].vids is defined %}
    bridge-vids {{ intvars[interface].vids }}
{%     if intvars[interface].pvid is defined %}
    bridge-pvid {{ intvars[interface].pvid }}
{%     endif %}
{%   else %}
{%     if intvars[interface].bridge_access is defined %}
    bridge-access {{ intvars[interface].bridge_access }}
{%     endif %}
{%   endif %}
{%   if intvars[interface].stp_port_cost is defined %}
    mstpctl-portpathcost {{ intvars[interface].stp_port_cost }}
{%   endif %}
{%   if intvars[interface].bpduguard is defined and intvars[interface].bpduguard == "enable" %}
    mstpctl-bpduguard yes
{%   endif %}
{%   if intvars[interface].adminedge is defined and intvars[interface].adminedge == "enable" %}
    mstpctl-portadminedge yes
{%   endif %}
{%   if intvars[interface].vrr_mac is defined %}
{%     if intvars[interface].vrr_ipv4 is defined %}
    address-virtual {{intvars[interface].vrr_mac}} {{intvars[interface].vrr_ipv4}}
{%     endif -%}
{%     if intvars[interface].vrr_ipv6 is defined %}
    address-virtual {{intvars[interface].vrr_mac}} {{intvars[interface].vrr_ipv6}}
{%     endif -%}
{%   endif -%}
{%   if intvars[interface].link_speed is defined %}
    link-speed {{ intvars[interface].link_speed }}
{%   endif %}
{%   if intvars[interface].link_duplex is defined %}
    link-duplex {{ intvars[interface].link_duplex }}
{%   endif %}
{%   if intvars[interface].link_autoneg is defined %}
    link-autoneg {{ intvars[interface].link_autoneg }}
{%   endif %}
{%   if intvars[interface].post_up is defined %}
{%     for postup in intvars[interface].post_up %}
    post-up {{ postup }}
{%     endfor -%}
{%   endif %}
{%   if intvars[interface].post_down is defined %}
{%     for postdown in intvars[interface].post_down %}
    post-down {{ postdown }}
{%     endfor -%}
{%   endif %}
{%   if intvars[interface].vrf is defined %}
    vrf {{intvars[interface].vrf}}
{%   elif intvars[interface].vrfmgmt is defined and intvars[interface].vrfmgmt == "enable" %}
    vrf mgmt
{%   endif %}

{% endfor %}

{% if node.BGP is defined %}
{%    for bgpvars in node.BGP %}
{### Configure the fabric ports IPv6 settings for unnumbered operation ###}
{%        if bgpvars.peer_groups is defined and bgpvars.peer_groups.fabric is defined %}
{%            for iface in bgpvars.peer_groups.fabric.interfaces %}
auto {{ iface }}
iface {{ iface }}
    mtu 9216

{%            endfor %}
{%        endif %}
{%    endfor %}
{% endif %}
{### Check for mgmt VRF and create if defined ###}
{% if intvars.eth0 is defined %}
{%   if intvars.eth0.vrfmgmt is defined and intvars.eth0.vrfmgmt == "enable" %}
auto mgmt
iface mgmt
    address 127.0.0.1/8
    vrf-table auto
{%   endif %}
{% else %}
auto eth0
iface eth0 inet dhcp
{% endif %}
{### Add VRFs ###}
{% if VRFs is defined %}
{%   for vrf in VRFs -%}
auto {{vrf}}
iface {{vrf}}
{%     if VRFs[vrf].ipv4 is defined %}
    address {{VRFs[vrf].ipv4}}
{%     endif %}
{%     if VRFs[vrf].ipv6 is defined %}
    address {{VRFs[vrf].ipv6}}
{%     endif %}
{%     if VRFs[vrf].table is defined %}
    vrf-table {{VRFs[vrf].table}}
{%     else %}
    vrf-table auto
{%     endif %}
{%   endfor %}
{% endif %}
{### Build the bonds and member interfaces ###}
{% if bonds is defined %}
{%   for bond in bonds -%}
{%     if bonds[bond].members is defined %}

{### Loop through and create the member interfaces ###}
{%       for mem_int in bonds[bond].members -%}
auto {{mem_int}}
iface {{mem_int}}
{%         if ansible_distribution == "Ubuntu" %}
    bond-master {{ bond }}
{%         endif %}
{%         if bonds[bond].mtu is defined %}
    mtu {{ bonds[bond].mtu }}
{%         endif %}
{%       endfor %}
{### Create the actual bond interface ###}
auto {{bond}}
{%       if bonds[bond].dhcp is defined and bonds[bond].dhcp == "enable" %}
iface {{bond}} inet dhcp
{%       else -%}
iface {{bond}}
{%       endif -%}
{%       if ansible_distribution == "Ubuntu" %}
    bond-slaves none
{%       else -%}
    bond-slaves {{bonds[bond].members | join(" ")}}
{%       endif -%}
{%       if bonds[bond].mtu is defined %}
    mtu {{ bonds[bond].mtu }}
{%       endif %}
{%       if bonds[bond].LACP_rate is defined %}
{%         if bonds[bond].LACP_rate == "fast" %}
    bond-lacp-rate 1
{%         else %}
    bond-lacp-rate 0
{%         endif -%}
{%       endif %}
{### If vids is defined it's a trunk otherwise check if access port ###}
{%       if bonds[bond].vids is defined %}
    bridge-vids {{ bonds[bond].vids }}
{%         if bonds[bond].pvid is defined %}
    bridge-pvid {{ bonds[bond].pvid }}
{%         endif %}
{%       else %}
{%         if bonds[bond].bridge_access is defined %}
    bridge-access {{ bonds[bond].bridge_access }}
{%         endif %}
{%       endif %}
{%       if bonds[bond].clagid is defined %}
    clag-id {{bonds[bond].clagid}}
{%       endif %}
{%       if bonds[bond].ipv4 is defined %}
    address {{bonds[bond].ipv4}}
{%       endif %}
{%       if bonds[bond].ipv6 is defined %}
    address {{bonds[bond].ipv6}}
{%       endif %}
{%       if bonds[bond].stp_port_cost is defined %}
    mstpctl-portpathcost {{ bonds[bond].stp_port_cost }}
{%       endif %}
{%       if bonds[bond].stp_port_cost is defined %}
    mstpctl-portpathcost {{ bonds[bond].stp_port_cost }}
{%       endif %}
{%       if bonds[bond].bpduguard is defined and bonds[bond].bpduguard == "enable" %}
    mstpctl-bpduguard yes
{%       endif %}
{%       if bonds[bond].adminedge is defined and bonds[bond].adminedge == "enable" %}
    mstpctl-portadminedge yes
{%       endif %}
{%       if bonds[bond].vrr_mac is defined %}
{%         if bonds[bond].vrr_ipv4 is defined %}
    address-virtual {{bonds[bond].vrr_mac}} {{bonds[bond].vrr_ipv4}}
{%         endif -%}
{%         if bonds[bond].vrr_ipv6 is defined %}
    address-virtual {{bonds[bond].vrr_mac}} {{bonds[bond].vrr_ipv6}}
{%         endif -%}
{%       endif -%}
{%       if bonds[bond].post_up is defined %}
{%         for postup in bonds[bond].post_up %}
    post-up {{ postup }}
{%         endfor -%}
{%       endif %}
{%       if bonds[bond].post_down is defined %}
{%         for postdown in bonds[bond].post_down %}
    post-down {{ postdown }}
{%         endfor -%}
{%       endif %}
{%     endif %}
{%   endfor %}
{% endif %}
{### Build the peerlink and member interfaces ###}
{% if MLAGvars %}
{%   if MLAGvars.members is defined %}
{### Loop through and create the member interfaces ###}
{%     for member in MLAGvars.members -%}
auto {{member}}
iface {{member}}
{%       if MLAGvars.mtu is defined %}
    mtu {{ MLAGvars.mtu }}
{%       endif %}
{%     endfor %}
{### Create the peerlink bond default to name peerlink unless a specifc name specified ###}
{%     if MLAGvars.peerlink_name is defined %}
auto {{MLAGvars.peerlink_name}}
iface {{MLAGvars.peerlink_name}}
{%     else %}
auto peerlink
iface peerlink
{%     endif %}
    bond-slaves {{MLAGvars.members | join(" ")}}
{%     if MLAGvars.mtu is defined %}
    mtu {{ MLAGvars.mtu }}
{%     endif %}
{### Create the peerlink sub interface for CLAG communication ###}
{%     if MLAGvars.peerlink_name is defined %}
auto {{MLAGvars.peerlink_name}}.{{MLAGvars.peerlink_sub_int}}
iface {{MLAGvars.peerlink_name}}.{{MLAGvars.peerlink_sub_int}}
{%     else %}
auto peerlink.{{MLAGvars.peerlink_sub_int}}
iface peerlink.{{MLAGvars.peerlink_sub_int}}
{%     endif %}
    clagd-enable yes
    address {{MLAGvars.peerlink_ip}}/30
    clagd-peer-ip {{MLAGvars.peerlink_peer_ip}}
{%     if intvars.eth0.vrfmgmt is defined and intvars.eth0.vrfmgmt == "enable" %}
    clagd-backup-ip {{hostvars[MLAGvars.backup_peer]['ansible_eth0']['ipv4']['address']}} vrf mgmt
{%     else %}
    clagd-backup-ip {{hostvars[MLAGvars.backup_peer]['ansible_eth0']['ipv4']['address']}}
{%     endif %}
    clagd-sys-mac {{MLAGvars.sysmac}}
{%     if MLAGvars.description is defined %}
    alias {{MLAGvars.description}}
{%     endif %}
{%   endif %}

{% endif %}

{### Create the VLAN aware bridge (Yeah only mode supported for now) ###}
{% if vlans %}
auto bridge
iface bridge
    bridge-vlan-aware yes
    bridge-ports {{vlans.members | join(" ")}}
{%   if vlans.default_vids is defined %}
    bridge-vids {{vlans.default_vids}}
{%   endif %}
{%   if vlans.default_pvid is defined %}
    bridge-pvid {{vlans.default_pvid}}
{%   endif %}
{%   if vlans.STP_priority is defined %}
    mstpctl-treeprio {{vlans.STP_priority}}
{%   endif %}
{%   if vlans.mac_ageing is defined %}
    mstpctl-ageing {{vlans.mac_ageing}}
{%   endif %}

{% endif %}

{### Create the VLAN L3 virtual interface (SVI) ###}
{% if svi %}
{%   for vlan_int in svi %}
auto bridge.{{vlan_int[4:]}}
{%     if svi[vlan_int].dhcp is defined and svi[vlan_int].dhcp == "enable" %}
iface bridge.{{vlan_int[4:]}} inet dhcp
{%     else -%}
iface bridge.{{vlan_int[4:]}}
{%     endif -%}
{%     if svi[vlan_int].ipv4 is defined %}
    address {{svi[vlan_int].ipv4}}
{%     endif -%}
{%     if svi[vlan_int].ipv6 is defined %}
    address {{svi[vlan_int].ipv6}}
{%     endif -%}
{%     if svi[vlan_int].alias is defined %}
    alias {{svi[vlan_int].alias}}
{%     endif -%}
{%     if svi[vlan_int].vrr_mac is defined %}
{%       if svi[vlan_int].vrr_ipv4 is defined %}
    address-virtual {{svi[vlan_int].vrr_mac}} {{svi[vlan_int].vrr_ipv4}}
{%       endif -%}
{%       if svi[vlan_int].vrr_ipv6 is defined %}
    address-virtual {{svi[vlan_int].vrr_mac}} {{svi[vlan_int].vrr_ipv6}}
{%       endif -%}
{%     endif -%}
{%   endfor %}

{% endif %}

{### Create VXLAN interfaces ###}
{% if node.VXLAN is defined %}
{%   if node.VXLAN.LNV_VNI_list is defined %}
{%     for vni_id in node.VXLAN.LNV_VNI_list %}
auto vni-10{{vni_id}}
iface vni-10{{vni_id}}
    vxlan-id 10{{vni_id}}
    bridge-access {{vni_id}}
    vxlan-local-tunnelip {{intvars["loopback"].ipv4[:-3] }}
    mstpctl-bpduguard yes
    mstpctl-portbpdufilter yes
{%     endfor -%}
{%   endif -%}

{% endif -%}