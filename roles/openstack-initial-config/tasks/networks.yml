---

- name: create config folder locally
  file: path=config/{{ ansible_hostname }} state=directory recurse=yes
  become: no
  delegate_to: localhost
  tags:
    - local
  when: global.save_local

- name: create rendered flat-file of neutron network config locally
  template: src=network_config.j2 dest=config/{{ ansible_hostname }}/network_config.sh
  become: no
  delegate_to: localhost
  tags:
    - local
  when: global.save_local

# Collect address scope data to avoid duplication errors
- name: collect address scopes
  command: openstack {{ openstack.keystone.admin_credentials }} address scope list
  register: _address_scopes

- name: collect subnet pools
  command: openstack {{ openstack.keystone.admin_credentials }} subnet pool list
  register: _subnet_pools

- name: collect networks
  command: openstack {{ openstack.keystone.admin_credentials }} network list
  register: _networks

- name: collect subnets
  command: openstack {{ openstack.keystone.admin_credentials }} subnet list
  register: _subnets


- name: configure address scopes
  become: yes
  command: >
      openstack {{openstack.keystone.admin_credentials}} address scope create
      {%   for arg,value in openstack.neutron.address_scope[item].items() -%}
      {%       if value == True -%}
         --{{arg}} \
      {%       elif value == False -%}
      {%       elif value == None -%}
      {%       elif value is string or value is number -%}
         --{{arg}} {{value}} \
      {%       elif value is sequence -%}
      {%           for i,v in value.items() -%}
      {%              if loop.first %}  --{{arg}} {{i}}={{v}}{%- else %},{{i}}={{v}}{% endif %}
      {%           endfor %} \
      {%       endif %}
      {%   endfor %}
         {{ item }}
  when: item not in _address_scopes.stdout
  with_items: "{{ openstack.neutron.address_scope }}"

- name: configure subnet pools
  become: yes
  command: >
      openstack {{openstack.keystone.admin_credentials}} subnet pool create
      {%   for arg,value in openstack.neutron.subnet_pool[item].items() -%}
      {%       if value == True -%}
         --{{arg}} \
      {%       elif value == False -%}
      {%       elif value == None -%}
      {%       elif value is string or value is number -%}
         --{{arg}} {{value}} \
      {%       elif value is sequence -%}
      {%           for i,v in value.items() -%}
      {%              if loop.first %}  --{{arg}} {{i}}={{v}}{%- else %},{{i}}={{v}}{% endif %}
      {%           endfor %} \
      {%       endif %}
      {%   endfor %}
         {{ item }}
  when: item not in _subnet_pools.stdout
  with_items: "{{ openstack.neutron.subnet_pool }}"

- name: configure networks
  become: yes
  command: >
      openstack {{openstack.keystone.admin_credentials}} network create
      {%   for arg,value in openstack.neutron.network[item].items() -%}
      {%       if value == True -%}
         --{{arg}} \
      {%       elif value == False -%}
      {%       elif value == None -%}
      {%       elif value is string or value is number -%}
         --{{arg}} {{value}} \
      {%       elif value is sequence -%}
      {%           for i,v in value.items() -%}
      {%              if loop.first %}  --{{arg}} {{i}}={{v}}{%- else %},{{i}}={{v}}{% endif %}
      {%           endfor %} \
      {%       endif %}
      {%   endfor %}
         {{ item }}
  when: item not in _networks.stdout
  with_items: "{{ openstack.neutron.network }}"

- name: configure subnets
  become: yes
  command: >
      openstack {{openstack.keystone.admin_credentials}} subnet create
      {%   for arg,value in openstack.neutron.subnet[item].items() -%}
      {%       if value == True -%}
         --{{arg}} \
      {%       elif value == False -%}
      {%       elif value == None -%}
      {%       elif value is string or value is number -%}
         --{{arg}} {{value}} \
      {%       elif value is sequence -%}
      {%           for i,v in value.items() -%}
      {%              if loop.first %}  --{{arg}} {{i}}={{v}}{%- else %},{{i}}={{v}}{% endif %}
      {%           endfor %} \
      {%       endif %}
      {%   endfor %}
         {{ item }}
  when:  item not in _subnets.stdout
  with_items: "{{ openstack.neutron.subnet }}"
